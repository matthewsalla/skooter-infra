#cloud-config
hostname: ${hostname}
manage_etc_hosts: true

users:
  - name: ubuntu
    ssh_authorized_keys:
      - "${ssh_key}"
      - "${cluster_public_key}"
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash

package_update: true
package_upgrade: true
packages:
  - qemu-guest-agent

# Ensure public / private key are copied to the VM
write_files:
  - path: /home/ubuntu/.ssh/id_rsa
    permissions: "0600"
    encoding: b64  # Use base64 encoding
    content: ${base64encode(cluster_private_key)}

  - path: /home/ubuntu/.ssh/id_rsa.pub
    permissions: "0644"
    content: |
      ${cluster_public_key}

bootcmd:
  # Enable mount propagation (before system services start)
  - mkdir -p /var/lib/kubelet
  - mount --bind /var/lib/kubelet /var/lib/kubelet
  - mount --make-rshared /var/lib/kubelet

runcmd:
  # Enable & start QEMU Guest Agent
  - systemctl enable --now qemu-guest-agent
  
  # Ensure iscsid service is enabled and started
  - systemctl enable --now iscsid
  
  # Verify mount propagation
  - findmnt -o TARGET,PROPAGATION /var/lib/kubelet
  
  # Persist the changes in fstab
  - echo '/var/lib/kubelet /var/lib/kubelet none bind,rshared 0 0' | tee -a /etc/fstab
  - systemctl daemon-reload
  - mount -a

  # Ensure ssh key is owned by ubuntu user
  - chown ubuntu:ubuntu /home/ubuntu/.ssh
  - chown ubuntu:ubuntu /home/ubuntu/.ssh/id_rsa
  - chmod 700 /home/ubuntu/.ssh
  - chmod 600 /home/ubuntu/.ssh/id_rsa

  # Install K3s Control Plane
  - |
    if [ "${node_type}" = "control-plane" ]; then
      curl -sfL https://get.k3s.io \
        | INSTALL_K3S_EXEC="--disable traefik \
                            --tls-san ${k3s_domain} \
                            --node-taint node-role.kubernetes.io/control-plane:NoSchedule \
                            --node-label role=control-plane" sh -;
      export K3S_TOKEN=$(sudo cat /var/lib/rancher/k3s/server/node-token);
      echo "$K3S_TOKEN" | tee /home/ubuntu/k3s_token;
      chown ubuntu:ubuntu /home/ubuntu/k3s_token;
    fi

  # Format longhorn volume (Worker Nodes) using byte-exact size
  - |
    if [ "${node_type}" = "worker-node" ]; then
      echo "Setting up Longhorn Disk by byte countâ€¦";

      # calculate target size in bytes
      TARGET_BYTES=$(( ${longhorn_disk_size} * 1024 * 1024 * 1024 ));
      echo "Expecting disk of $TARGET_BYTES bytes";

      # find device whose size exactly matches
      LONGHORN_DISK=$(lsblk -nd --output NAME,SIZE --bytes \
        | awk -v want="$TARGET_BYTES" '$2 == want { print $1 }');

      if [ -n "$LONGHORN_DISK" ]; then
        mkfs.ext4 -F "/dev/$LONGHORN_DISK";
        mkdir -p /var/lib/longhorn;
        echo "/dev/$LONGHORN_DISK /var/lib/longhorn ext4 defaults 0 0" \
          | tee -a /etc/fstab;
        mount -a;
      else
        echo "ERROR: no disk of size ${longhorn_disk_size}G ($TARGET_BYTES bytes) found!";
        lsblk -nd --output NAME,SIZE --bytes;
      fi
    fi

  # Install K3s Agent (Worker Nodes)
  - |
    if [ "${node_type}" = "worker-node" ]; then
      while ! curl -k https://${control_ip}:6443 >/dev/null 2>&1; do
        echo "Waiting for control plane...";
        sleep 5;
      done;
      
      sleep 20;

      ls -la /home/ubuntu/.ssh;
      export K3S_TOKEN=$(ssh -o "StrictHostKeyChecking=no" \
        -i /home/ubuntu/.ssh/id_rsa ubuntu@${control_ip} "cat /home/ubuntu/k3s_token");
      echo "K3S_TOKEN:";
      echo $K3S_TOKEN;
      curl -sfL https://get.k3s.io \
        | K3S_URL="https://${control_ip}:6443" \
          K3S_TOKEN="$K3S_TOKEN" \
          INSTALL_K3S_EXEC="--node-label longhorn-true \
                            --node-label node.longhorn.io/create-default-disk=true" sh -;
    fi
